/*
Ory Identities API

This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more.

API version:
Contact: office@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateSettingsFlowWithCodeMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSettingsFlowWithCodeMethod{}

// UpdateSettingsFlowWithCodeMethod Update Settings Flow with Lookup Method
type UpdateSettingsFlowWithCodeMethod struct {
	// DeviceUntrust if set, will untrust this device id for this aal2 method for this account
	CodeDeviceUntrust *string `json:"code_device_untrust,omitempty"`
	// CodeEnable if set to true will disable the code credential method
	CodeDisable *bool `json:"code_disable,omitempty"`
	// CodeEnable if set to true will enable the code credential method
	CodeEnable *bool `json:"code_enable,omitempty"`
	// CSRFToken is the anti-CSRF token
	CsrfToken *string `json:"csrf_token,omitempty"`
	// Method  Should be set to \"code\" when trying to enable or disable the credential method.
	Method string `json:"method"`
	// Transient data to pass along to any webhooks
	TransientPayload     map[string]interface{} `json:"transient_payload,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateSettingsFlowWithCodeMethod UpdateSettingsFlowWithCodeMethod

// NewUpdateSettingsFlowWithCodeMethod instantiates a new UpdateSettingsFlowWithCodeMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSettingsFlowWithCodeMethod(method string) *UpdateSettingsFlowWithCodeMethod {
	this := UpdateSettingsFlowWithCodeMethod{}
	this.Method = method
	return &this
}

// NewUpdateSettingsFlowWithCodeMethodWithDefaults instantiates a new UpdateSettingsFlowWithCodeMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSettingsFlowWithCodeMethodWithDefaults() *UpdateSettingsFlowWithCodeMethod {
	this := UpdateSettingsFlowWithCodeMethod{}
	return &this
}

// GetCodeDeviceUntrust returns the CodeDeviceUntrust field value if set, zero value otherwise.
func (o *UpdateSettingsFlowWithCodeMethod) GetCodeDeviceUntrust() string {
	if o == nil || IsNil(o.CodeDeviceUntrust) {
		var ret string
		return ret
	}
	return *o.CodeDeviceUntrust
}

// GetCodeDeviceUntrustOk returns a tuple with the CodeDeviceUntrust field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSettingsFlowWithCodeMethod) GetCodeDeviceUntrustOk() (*string, bool) {
	if o == nil || IsNil(o.CodeDeviceUntrust) {
		return nil, false
	}
	return o.CodeDeviceUntrust, true
}

// HasCodeDeviceUntrust returns a boolean if a field has been set.
func (o *UpdateSettingsFlowWithCodeMethod) HasCodeDeviceUntrust() bool {
	if o != nil && !IsNil(o.CodeDeviceUntrust) {
		return true
	}

	return false
}

// SetCodeDeviceUntrust gets a reference to the given string and assigns it to the CodeDeviceUntrust field.
func (o *UpdateSettingsFlowWithCodeMethod) SetCodeDeviceUntrust(v string) {
	o.CodeDeviceUntrust = &v
}

// GetCodeDisable returns the CodeDisable field value if set, zero value otherwise.
func (o *UpdateSettingsFlowWithCodeMethod) GetCodeDisable() bool {
	if o == nil || IsNil(o.CodeDisable) {
		var ret bool
		return ret
	}
	return *o.CodeDisable
}

// GetCodeDisableOk returns a tuple with the CodeDisable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSettingsFlowWithCodeMethod) GetCodeDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.CodeDisable) {
		return nil, false
	}
	return o.CodeDisable, true
}

// HasCodeDisable returns a boolean if a field has been set.
func (o *UpdateSettingsFlowWithCodeMethod) HasCodeDisable() bool {
	if o != nil && !IsNil(o.CodeDisable) {
		return true
	}

	return false
}

// SetCodeDisable gets a reference to the given bool and assigns it to the CodeDisable field.
func (o *UpdateSettingsFlowWithCodeMethod) SetCodeDisable(v bool) {
	o.CodeDisable = &v
}

// GetCodeEnable returns the CodeEnable field value if set, zero value otherwise.
func (o *UpdateSettingsFlowWithCodeMethod) GetCodeEnable() bool {
	if o == nil || IsNil(o.CodeEnable) {
		var ret bool
		return ret
	}
	return *o.CodeEnable
}

// GetCodeEnableOk returns a tuple with the CodeEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSettingsFlowWithCodeMethod) GetCodeEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.CodeEnable) {
		return nil, false
	}
	return o.CodeEnable, true
}

// HasCodeEnable returns a boolean if a field has been set.
func (o *UpdateSettingsFlowWithCodeMethod) HasCodeEnable() bool {
	if o != nil && !IsNil(o.CodeEnable) {
		return true
	}

	return false
}

// SetCodeEnable gets a reference to the given bool and assigns it to the CodeEnable field.
func (o *UpdateSettingsFlowWithCodeMethod) SetCodeEnable(v bool) {
	o.CodeEnable = &v
}

// GetCsrfToken returns the CsrfToken field value if set, zero value otherwise.
func (o *UpdateSettingsFlowWithCodeMethod) GetCsrfToken() string {
	if o == nil || IsNil(o.CsrfToken) {
		var ret string
		return ret
	}
	return *o.CsrfToken
}

// GetCsrfTokenOk returns a tuple with the CsrfToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSettingsFlowWithCodeMethod) GetCsrfTokenOk() (*string, bool) {
	if o == nil || IsNil(o.CsrfToken) {
		return nil, false
	}
	return o.CsrfToken, true
}

// HasCsrfToken returns a boolean if a field has been set.
func (o *UpdateSettingsFlowWithCodeMethod) HasCsrfToken() bool {
	if o != nil && !IsNil(o.CsrfToken) {
		return true
	}

	return false
}

// SetCsrfToken gets a reference to the given string and assigns it to the CsrfToken field.
func (o *UpdateSettingsFlowWithCodeMethod) SetCsrfToken(v string) {
	o.CsrfToken = &v
}

// GetMethod returns the Method field value
func (o *UpdateSettingsFlowWithCodeMethod) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *UpdateSettingsFlowWithCodeMethod) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *UpdateSettingsFlowWithCodeMethod) SetMethod(v string) {
	o.Method = v
}

// GetTransientPayload returns the TransientPayload field value if set, zero value otherwise.
func (o *UpdateSettingsFlowWithCodeMethod) GetTransientPayload() map[string]interface{} {
	if o == nil || IsNil(o.TransientPayload) {
		var ret map[string]interface{}
		return ret
	}
	return o.TransientPayload
}

// GetTransientPayloadOk returns a tuple with the TransientPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSettingsFlowWithCodeMethod) GetTransientPayloadOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TransientPayload) {
		return map[string]interface{}{}, false
	}
	return o.TransientPayload, true
}

// HasTransientPayload returns a boolean if a field has been set.
func (o *UpdateSettingsFlowWithCodeMethod) HasTransientPayload() bool {
	if o != nil && !IsNil(o.TransientPayload) {
		return true
	}

	return false
}

// SetTransientPayload gets a reference to the given map[string]interface{} and assigns it to the TransientPayload field.
func (o *UpdateSettingsFlowWithCodeMethod) SetTransientPayload(v map[string]interface{}) {
	o.TransientPayload = v
}

func (o UpdateSettingsFlowWithCodeMethod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSettingsFlowWithCodeMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeDeviceUntrust) {
		toSerialize["code_device_untrust"] = o.CodeDeviceUntrust
	}
	if !IsNil(o.CodeDisable) {
		toSerialize["code_disable"] = o.CodeDisable
	}
	if !IsNil(o.CodeEnable) {
		toSerialize["code_enable"] = o.CodeEnable
	}
	if !IsNil(o.CsrfToken) {
		toSerialize["csrf_token"] = o.CsrfToken
	}
	toSerialize["method"] = o.Method
	if !IsNil(o.TransientPayload) {
		toSerialize["transient_payload"] = o.TransientPayload
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateSettingsFlowWithCodeMethod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateSettingsFlowWithCodeMethod := _UpdateSettingsFlowWithCodeMethod{}

	err = json.Unmarshal(data, &varUpdateSettingsFlowWithCodeMethod)

	if err != nil {
		return err
	}

	*o = UpdateSettingsFlowWithCodeMethod(varUpdateSettingsFlowWithCodeMethod)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code_device_untrust")
		delete(additionalProperties, "code_disable")
		delete(additionalProperties, "code_enable")
		delete(additionalProperties, "csrf_token")
		delete(additionalProperties, "method")
		delete(additionalProperties, "transient_payload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateSettingsFlowWithCodeMethod struct {
	value *UpdateSettingsFlowWithCodeMethod
	isSet bool
}

func (v NullableUpdateSettingsFlowWithCodeMethod) Get() *UpdateSettingsFlowWithCodeMethod {
	return v.value
}

func (v *NullableUpdateSettingsFlowWithCodeMethod) Set(val *UpdateSettingsFlowWithCodeMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSettingsFlowWithCodeMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSettingsFlowWithCodeMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSettingsFlowWithCodeMethod(val *UpdateSettingsFlowWithCodeMethod) *NullableUpdateSettingsFlowWithCodeMethod {
	return &NullableUpdateSettingsFlowWithCodeMethod{value: val, isSet: true}
}

func (v NullableUpdateSettingsFlowWithCodeMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSettingsFlowWithCodeMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
